[
	{ "keys": ["ctrl+shift+s"], "command": "save_all" },
	{ "keys": ["ctrl+."], "command": "show_at_center" },
	{ "keys": ["ctrl+alt+right"], "command": "indent" },
	{ "keys": ["ctrl+alt+left"], "command": "unindent" },
	{ "keys": ["ctrl+alt+i"], "command": "reindent" },
	{ "keys": ["ctrl+shift+c"], "command": "toggle_comment", "args": { "block": false } },
	{ "keys": ["ctrl+alt+shift+c"], "command": "toggle_comment", "args": { "block": true } },
	{ "keys": ["ctrl+alt+space"], "command": "toggle_setting", "args": {"setting": "word_wrap"} },
	{ "keys": ["ctrl+alt+shift+space"], "command": "toggle_prose_view" },
	{ "keys": ["alt+m"],"command": "markdown_preview", "args": {"target": "browser", "parser":"markdown"} },
	{ "keys": ["ctrl+\\"], "command": "show_panel", "args": {"panel": "console", "toggle": true} },
	{ "keys": ["ctrl+0"], "command": "reset_font_size" },
	// Smart title case
	{ "keys": ["ctrl+k", "ctrl+t"], "command": "smart_title_case" },
	// Expand Region
	{ "keys": ["alt+shift+up"], "command": "expand_region" },
	{ "keys": ["alt+shift+down"], "command": "expand_region", "args": {"undo": true}, "context": [{ "key": "expand_region_soft_undo" }] },
	// Origami
	{ "keys": ["ctrl+k","ctrl+\\"], "command": "destroy_pane", "args": {"direction": "self"} },
	// Project Manager
	{ "keys": ["ctrl+alt+p"], "command": "project_manager" },
	{ "keys": ["ctrl+alt+o"], "command": "project_manager", "args": {"action": "switch"} },
	{ "keys": ["ctrl+alt+shift+o"], "command": "project_manager", "args": {"action": "new"} },
	// GitSavvy
	{ "keys": ["ctrl+alt+g"], "command": "gs_show_status"},
	// LaTeXTools
	{
		"keys": ["ctrl+l","ctrl+s"],
		"command": "insert_snippet",
		"args": { "name":"Packages/User/Text small capitals.sublime-snippet" },
		"context": [{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }]
	},
	{
		"keys": ["ctrl+l","ctrl+i"],
		"command": "insert_snippet",
		"args": { "name":"Packages/User/Text italics.sublime-snippet" },
		"context": [{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }]
	},
	{
		"keys": ["ctrl+l","ctrl+n"],
		"command": "insert_snippet",
		"args": { "name":"Packages/User/Inline listing.sublime-snippet" },
		"context": [{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }]
	},
	{
		"keys": ["ctrl+l","ctrl+m"],
		"command": "insert_snippet",
		"args": { "name":"Packages/User/Multicolumn.sublime-snippet" },
		"context": [{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }]
	},
	{
		"keys": ["ctrl+l","ctrl+h"],
		"command": "insert_snippet",
		"args": { "name":"Packages/User/Hyperref.sublime-snippet" },
		"context": [{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }]
	},
	// Custom LaTeX table alignment by "&" (but not "\&") and "\\" or "\\[1em]"
	{
		"keys": ["ctrl+shift+a"],
		"command": "align_tab",
		"args": {"user_input" : "(?<!\\\\)&|\\\\\\\\(?:\\[\\w+\\])*"},
		"context": [{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }]
	},
	{
		"keys": ["ctrl+shift+m"],
		"command": "insert_snippet",
		"args": {"contents": " %>% "},
		"context": [{ "key": "selector", "operator": "equal", "operand": "source.r" }]
	},	
	{
		"keys": ["ctrl+alt+i"],
		"command": "insert_snippet",
		"args": {"name": "Packages/User/RMarkdown code chunk.sublime-snippet"},
		"context": [{ "key": "selector", "operator": "equal", "operand": "text.html.markdown.rmarkdown" }]
	},	

	// StataEditor
	{ 
		"keys": ["ctrl+enter"],
		"command": "stata_execute",
		"args": {"Mode": "do", "Selection": "line"},
		"context": [{ "key": "selector", "operator": "equal", "operand": "source.stata" }]
	},
	// Experimental
	{ "keys": ["ctrl+shift+x"], "command": "expand_selection_to_latex" },
	{ 
		"keys": ["ctrl+alt+w"],
		"command": "open_dir", 
		"args": {"dir": "$file_path", "file": "$file_name"} 
	},
	{ "keys": ["ctrl+alt+t"], "command": "open_terminal" },
	{ "keys": ["ctrl+shift+t"], "command": "reopen_last_file" },

	
	// Auto-pair backtick `quote`
	{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`$0`"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "[`a-zA-Z0-9_]$", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
		]
	},
	{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}`"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["`"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true },
			{ "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
		]
	},

	// Auto-pair typographical “quote”
	{ "keys": ["“"], "command": "insert_snippet", "args": {"contents": "“$0”"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "[“a-zA-Z0-9_]$", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
		]
	},
	{ "keys": ["“"], "command": "insert_snippet", "args": {"contents": "“${0:$SELECTION}”"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["“"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^“", "match_all": true },
			{ "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
		]
	},

	// Auto-pair typographical «guillemets» 
	{ "keys": ["«"], "command": "insert_snippet", "args": {"contents": "«$0»"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "[«a-zA-Z0-9_]$", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
		]
	},
	{ "keys": ["«"], "command": "insert_snippet", "args": {"contents": "«${0:$SELECTION}»"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["«"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^«", "match_all": true },
			{ "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
		]
	}
]
